use bitflags::bitflags;
use bytemuck::{Pod, Zeroable};
use num_derive::FromPrimitive;

#[derive(Copy, Clone, Pod, Zeroable, Default)]
#[repr(C)]
pub struct SFOHeader {
    pub magic: u32,
    pub version: u32,
    pub key_table_offset: u32,
    pub data_table_offset: u32,
    pub index_table_entries: u32
}

#[derive(Copy, Clone, Pod, Zeroable, Default)]
#[repr(C)]
pub struct IndexTableEntry {
    pub key_offset: u16,
    pub parameter_format: ParameterFormat,
    pub parameter_length: u32,
    pub parameter_max_length: u32,
    pub data_offset: u32
}

#[derive(FromPrimitive, Copy, Clone, Debug, PartialEq, Default)]
#[repr(u16)]
pub enum ParameterFormat {
    /// Used in contents generated by the system (e.g.: save data)
    #[default]
    Utf8Special = 0x0400,
    /// Character string, NULL finished (0x00)
    Utf8 = 0x0401,
    /// `u32`
    Integer = 0x0404
}

bitflags! {
    pub struct Attribute: u32 {
        const SUPPORTS_INITIAL_USER_LOGOUT = 0x00000001;
        const ENTER_BUTTON_CROSS = 0x00000002;
        const PS_MOVE_WARNING_IN_OPTIONS = 0x00000004;
        const SUPPORTS_STEREOSCOPIC_3D = 0x00000008;
        const SUSPEND_WHEN_PS_PRESSED = 0x00000010;
        const ENTER_BUTTON_ASSIGNED = 0x00000020;
        const SHARE_MENU_OVERWRITE = 0x00000040;
        const SUSPEND_WHEN_PS_PRESSED_AND_SPECIAL_RES = 0x00000100;
        const HDCP_ENABLED = 0x00000200;
        const HDCP_DISABLED_NON_GAMES = 0x00000400;
        const SUPPORTS_PSVR = 0x00004000;
        const CPU_MODE_6 = 0x00008000;
        const CPU_MDDE_7 = 0x00010000;
        const SUPPORTS_NEO_MODE = 0x00800000;
        const REQUIRES_PSVR = 0x04000000;
        const SUPPORTS_HDR = 0x20000000;
    }
}

bitflags! {
    pub struct Attribute2: u32 {
        const SUPPORTS_VIDEO_RECORDING = 0x00000002;
        const SUPPORTS_CONTENT_SEARCH = 0x00000004;
        const PSVR_ETE_DISTANCE_DISABLED = 0x00000010;
        const PSVR_ETE_DISTANCE_DYNAMIC = 0x00000020;
        const SUPPORTS_SEPARATE_BROADCAST_MODE = 0x00000100;
        const NO_DUMMY_LOAD_PS_MOVE_TO_CPU = 0x00000200;
        const SUPPORTS_1O1_MATCH = 0x00000800;
        const SUPPORTS_TOT_TOURNAMENT = 0x00001000;
    }
}

pub enum Category {
    AdditionalContent,
    BluRay,
    GameContent,
    GameDigitalApp,
    SystemApp,
    GdbInvalid,
    NonGameBigApp,
    BGApp,
    NonGameMiniApp,
    CommonDialog,
    VideoServiceWebApp,
    PSCloudBetaApp,
    PS2Classic,
    GameApplicationPath,
    NonGameBigAppPatch,
    BGApplicationPatch,
    NonGameMiniAppPatch,
    VideoServiceWebAppPatch,
    PSCloudBetaAppPatch,
    SaveData,
}

impl Category {
    fn as_str(&self) -> &str {
        match self {
            Category::AdditionalContent => "ac",
            Category::BluRay => "bd",
            Category::GameContent => "gc",
            Category::GameDigitalApp => "gd",
            Category::SystemApp => "gda",
            Category::GdbInvalid => "gdb",
            Category::NonGameBigApp => "gdc",
            Category::BGApp => "gdd",
            Category::NonGameMiniApp => "gde",
            Category::CommonDialog => "gdg",
            Category::VideoServiceWebApp => "gdk",
            Category::PSCloudBetaApp => "gdl",
            Category::PS2Classic => "gdO",
            Category::GameApplicationPath => "gp",
            Category::NonGameBigAppPatch => "gpc",
            Category::BGApplicationPatch => "gpd",
            Category::NonGameMiniAppPatch => "gpe",
            Category::VideoServiceWebAppPatch => "gpk",
            Category::PSCloudBetaAppPatch => "gpl",
            Category::SaveData => "sd"
        }
    }

    fn from_str(category: &str) -> Option<Category> {
        match category {
            "ac" => Some(Category::AdditionalContent),
            "bd" => Some(Category::BluRay),
            "gc" => Some(Category::GameContent),
            "gd" => Some(Category::GameDigitalApp),
            "gda" => Some(Category::SystemApp),
            "gdb" => Some(Category::GdbInvalid),
            "gdc" => Some(Category::NonGameBigApp),
            "gdd" => Some(Category::BGApp),
            "gde" => Some(Category::NonGameMiniApp),
            "gdg" => Some(Category::VideoServiceWebApp),
            "gdk" => Some(Category::PSCloudBetaApp),
            "gdl" => Some(Category::PS2Classic),
            "gdO" => Some(Category::GameApplicationPath),
            "gp" => Some(Category::NonGameMiniApp),
            "gpc" => Some(Category::CommonDialog),
            "gpd" => Some(Category::VideoServiceWebApp),
            "gpe" => Some(Category::PSCloudBetaApp),
            "gpk" => Some(Category::PS2Classic),
            "gpl" => Some(Category::GameApplicationPath),
            "sd" => Some(Category::SaveData),
            _ => None
        }
    }
}

#[derive(FromPrimitive, Copy, Clone, Debug, PartialEq, Default)]
#[repr(u32)]
pub enum AppType {
    #[default]
    NotSpecified = 0,
    /// Allows only the purchased user and users on the same activated console to play with certain number of console limitation.
    PaidStandaloneFullApp = 1,
    /// Single application binary that can be upgraded from free trial to paid full application based on the purchased status of skus on PlayStation®Store or license information on Blu-ray Disc. Trial sku can be also played on Kiosk unit.
    UpgradeableApp = 2,
    /// Has no limitation on number of consoles to be played. Demo application is typically distributed from PlayStation®Store or Disc for free. This application can be played on Kiosk unit. This application cannot have trophies.
    DemoApp = 3,
    /// Free full application that comes with paid additional contents. This application may have trophies of freemium game scope.
    FreemiumApp = 4
}

fn main() {
    println!("Hello, world!");
}
